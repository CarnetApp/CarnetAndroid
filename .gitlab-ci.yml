image: openjdk:8-jdk

variables:
  ANDROID_COMPILE_SDK: "28"
  ANDROID_BUILD_TOOLS: "28.0.2"
  ANDROID_SDK_TOOLS:   "4333796"

before_script:
  - apt-get --quiet update --yes
  - apt-get --quiet install --yes wget tar unzip lib32stdc++6 lib32z1 openssh-client
  - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
  - eval $(ssh-agent -s)
  - sleep 2
  - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
  - mkdir -p ~/.ssh
  - chmod 700 ~/.ssh
  - echo "$SSH_KNOWN_HOSTS" > ~/.ssh/known_hosts
  - chmod 644 ~/.ssh/known_hosts
  - cd ../
  - rm Sync -R || true
  - rm GoogleSync -R || true
  - git clone https://github.com/CarnetApp/Sync
  - git clone https://github.com/phief/GoogleSync
  - cd CarnetAndroid
after_script:
  - cd ..
  - rm Sync -R
  - rm GoogleSync -R
  - cd CarnetAndroid
  
stages:
  - build
  - test

pushToGithub:
  stage: build
  script: #separated folders for repo to be sure to push everything
    - rm carnetgit -R || true
    - git clone ssh://git@gitlab.lostpod.me:8022/carnetapp/CarnetAndroid.git carnetgit
    - cd carnetgit
    - git remote add github git@github.com:CarnetApp/CarnetAndroid.git
    - for b in `git branch -r | grep -v -- '->' | sed 's/origin\///'`; do git checkout $b; git push github $b; done
    - cd ../
    - rm carnetgit -R

pulltoGitlab:
  stage: build
  script: #separated folders for repo to be sure to push everything
    - rm carnetgit -R || true
    - git clone https://github.com/CarnetApp/CarnetAndroid carnetgit
    - cd carnetgit
    - git remote add gitlab ssh://git@gitlab.lostpod.me:8022/carnetapp/CarnetAndroid.git
    - git fetch gitlab
    - git push --all gitlab
    - cd ../
    - rm carnetgit -R

.assemble:
  stage: build
  script:
    - wget --quiet --output-document=android-sdk.zip https://dl.google.com/android/repository/sdk-tools-linux-${ANDROID_SDK_TOOLS}.zip
    - unzip -d android-sdk-linux android-sdk.zip
    - echo y | android-sdk-linux/tools/bin/sdkmanager "platforms;android-${ANDROID_COMPILE_SDK}" >/dev/null
    - echo y | android-sdk-linux/tools/bin/sdkmanager "platform-tools" >/dev/null
    - echo y | android-sdk-linux/tools/bin/sdkmanager "build-tools;${ANDROID_BUILD_TOOLS}" >/dev/null
    - export ANDROID_HOME=$PWD/android-sdk-linux
    - export PATH=$PATH:$PWD/android-sdk-linux/platform-tools/
    - chmod +x ./gradlew
    # temporarily disable checking for EPIPE error and use yes to accept all licenses
    - set +o pipefail
    - yes | android-sdk-linux/tools/bin/sdkmanager --licenses
    - set -o pipefail

assembleDebug:
  extends: .assemble
  script:
    - ./gradlew assembleGoogleDebug
    - scp app/build/outputs/apk/google/debug/app-google-debug.apk phie@ovh3.phie.ovh:/home/ovh2/quicknote/binaries/android/commit_build_google_debug.apk
  artifacts:
    paths:
    - app/build/outputs/

debugTests:
  stage: test
  script:
    - ./gradlew -Pci --console=plain :app:testDebug
